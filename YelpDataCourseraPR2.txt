Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

SELECT (SELECT Count(*)
        FROM   attribute)   AS Attribute,
       (SELECT Count(*)
        FROM   business)    AS Business,
       (SELECT Count(*)
        FROM   category)    AS Category,
       (SELECT Count(*)
        FROM   checkin)     AS Checkin,
       (SELECT Count(*)
        FROM   elite_years) AS EliteYears,
       (SELECT Count(*)
        FROM   friend)      AS Friend,
       (SELECT Count(*)
        FROM   hours)       AS Hours,
       (SELECT Count(*)
        FROM   photo)       AS Photo,
       (SELECT Count(*)
        FROM   review)      AS Review,
       (SELECT Count(*)
        FROM   tip)         AS Tip,
       (SELECT Count(*)
        FROM   USER)        AS USER 
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

SELECT (SELECT Count(DISTINCT( id ))
        FROM   business)    AS Business,
       (SELECT Count(DISTINCT( business_id ))
        FROM   hours)       AS Hours,
       (SELECT Count(DISTINCT( business_id ))
        FROM   category)    AS Category,
       (SELECT Count(DISTINCT( business_id ))
        FROM   attribute)   AS Attribute,
       (SELECT Count(DISTINCT( id ))
        FROM   review)      AS Review,
       (SELECT Count(DISTINCT( business_id ))
        FROM   checkin)     AS Checkin,
       (SELECT Count(DISTINCT( id ))
        FROM   photo)       AS Photo,
       (SELECT Count(DISTINCT( user_id ))
        FROM   tip)         AS Tip,
       (SELECT Count(DISTINCT( id ))
        FROM   USER)        AS USER,
       (SELECT Count(DISTINCT( user_id ))
        FROM   friend)      AS Friend,
       (SELECT Count(DISTINCT( user_id ))
        FROM   elite_years) AS EliteYears 

i. Business = 10000 (id - Primary key)
ii. Hours = 1562 (business_id - Foreign key)
iii. Category = 2643 (business_id - Foreign key)
iv. Attribute = 1115 (business_id - Foreign key)
v. Review = 10000 (id - Primary key)
vi. Checkin = 493 (business_id - Foreign key)
vii. Photo = 10000 (id - Primary key)
viii. Tip = 537 (user_id - Foreign key)
ix. User = 10000 (id - Primary key)
x. Friend = 11 (user_id - Foreign key)
xi. Elite_years = 2780 (user_id - Foreign key)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:


SELECT *
FROM   user
WHERE  ( id IS NULL
          OR name IS NULL
          OR review_count IS NULL
          OR yelping_since IS NULL
          OR useful IS NULL
          OR funny IS NULL
          OR cool IS NULL
          OR fans IS NULL
          OR average_stars IS NULL
          OR compliment_hot IS NULL
          OR compliment_more IS NULL
          OR compliment_profile IS NULL
          OR compliment_cute IS NULL
          OR compliment_list IS NULL
          OR compliment_note IS NULL
          OR compliment_plain IS NULL
          OR compliment_cool IS NULL
          OR compliment_funny IS NULL
          OR compliment_writer IS NULL
          OR compliment_photos IS NULL ); 
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	 1	max:	5	avg: 3.7082
		
SELECT Min(stars) min,
	 Max(stars) max,
       Avg(stars) avg
FROM   review; 
	
	ii. Table: Business, Column: Stars
	
		min:	 1	max:	 5	avg: 3.6549

SELECT Min(stars) AS Minimum,
       Max(stars) AS Maximum,
       Avg(stars) AS Means
FROM   business 	
	
	iii. Table: Tip, Column: Likes
	
		min:	 0	max:	 2	avg: 0.0144
		
SELECT Min(likes) AS Minimum,
       Max(likes) AS Maximum,
       Avg(likes) AS Means
FROM   tip 
	
	iv. Table: Checkin, Column: Count
	
		min:	 1	max:	 53	avg: 1.9414
		
SELECT Min(count) AS Minimum,
       Max(count) AS Maximum,
       Avg(count) AS Means
FROM   checkin 

	v. Table: User, Column: Review_count
	
		min:	 0	max:	 2000	avg: 24.2995
		
SELECT Min(review_count) AS Minimum,
       Max(review_count) AS Maximum,
       Avg(review_count) AS Means
FROM   USER 

5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

SELECT city,
       state,
       Sum(review_count) AS Reviews
FROM   business
GROUP  BY city
ORDER  BY reviews DESC 	
	
	Copy and Paste the Result Below:
	
+-----------------+-------+---------+
| city                        | state | Reviews |
+-----------------+-------+---------+
| Las Vegas              | NV        |      82854 |
| Phoenix                  | AZ        |      34503 |
| Toronto                  | ON        |      24113 |
| Scottsdale            | AZ        |      20614 |
| Charlotte              | NC        |      12523 |
| Henderson              | NV        |      10871 |
| Tempe                      | AZ        |      10504 |
| Pittsburgh            | PA        |        9798 |
| Montréal                | QC        |        9448 |
| Chandler                | AZ        |        8112 |
| Mesa                        | AZ        |        6875 |
| Gilbert                  | AZ        |        6380 |
| Cleveland              | OH        |        5593 |
| Madison                  | WI        |        5265 |
| Glendale                | AZ        |        4406 |
| Mississauga          | ON        |        3814 |
| Edinburgh              | EDH      |        2792 |
| Peoria                    | AZ        |        2624 |
| North Las Vegas | NV        |        2438 |
| Markham                  | ON        |        2352 |
| Champaign              | IL        |        2029 |
| Stuttgart              | BW        |        1849 |
| Surprise                | AZ        |        1520 |
| Lakewood                | OH        |        1465 |
| Goodyear                | AZ        |        1155 |
+-----------------+-------+---------+
(Output limit exceeded, 25 of 362 total rows shown)
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars,
       Count(stars)
FROM   business
WHERE  city = 'Avon'
GROUP  BY stars 


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------+--------------+
| stars | count(stars) |
+-------+--------------+
|      1.5 |                        1 |
|      2.5 |                        2 |
|      3.5 |                        3 |
|      4.0 |                        2 |
|      4.5 |                        1 |
|      5.0 |                        1 |
+-------+--------------+


ii. Beachwood

SQL code used to arrive at answer:

SELECT stars        star,
       Count(stars) rating_and_count
FROM   business
WHERE  city = 'Beachwood'
GROUP  BY stars 

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
+------+------------------+
| star | rating_and_count |
+------+------------------+
|    2.0 |                                1 |
|    2.5 |                                1 |
|    3.0 |                                2 |
|    3.5 |                                2 |
|    4.0 |                                1 |
|    4.5 |                                2 |
|    5.0 |                                5 |
+------+------------------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
SELECT name,
       review_count AS total_reviews
FROM   user
ORDER  BY total_reviews DESC
LIMIT  3;  
		
	Copy and Paste the Result Below:
		
+--------+---------------+
| name      | total_reviews |
+--------+---------------+
| Gerald |                    2000 |
| Sara      |                    1629 |
| Yuri      |                    1339 |
+--------+---------------+

8. Does posting more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
To start with lets check with distribution of fans.

SELECT Min(fans) min,
       Max(fans) max,
       Avg(fans) avg
FROM   USER; 

+-----+-----+--------+
| min | max |        avg |
+-----+-----+--------+
|      0 | 503 | 1.4896 |
+-----+-----+--------+

Following table shows that number of fans various from 0 to 503 but mostly skewed to small amount.
Based on result now divide into three different categories low, medium, and high popularity.

SELECT popularity,
       Avg(review_count) AS AVERAGE_REVIEWS
FROM   (SELECT review_count,
               fans,
               CASE
                 WHEN fans < 5 THEN 'Low Popularity'
                 WHEN fans BETWEEN 5 AND 100 THEN 'Medium Popularity'
                 WHEN fans > 100 THEN 'High popularity'
                 ELSE NULL
               END AS 'Popularity'
        FROM   USER) b
GROUP  BY popularity
ORDER  BY average_reviews DESC; 


+-------------------+-----------------+
| popularity                | AVERAGE_REVIEWS |
+-------------------+-----------------+
| High popularity      |                      891.5 |
| Medium Popularity |      209.709923664 |
| Low Popularity        |      12.5626849894 |
+-------------------+-----------------+

Now we can see that high popularity categorized population tend to have higher average reviews.
Therefore, we could conclude that there are positive correlation between reviews and fans.
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: “Love”

+-----------+-----------+
| LoveCount | HateCount |
+-----------+-----------+
|            1780 |              232 |
+-----------+-----------+

	
	SQL code used to arrive at answer:

SELECT (SELECT Count(*)
        FROM   review
        WHERE  ( text LIKE ( '%love%' )
                  OR text LIKE ( '%love' )
                  OR text LIKE ( 'love%' ) )) AS LoveCount,
       (SELECT Count(*) AS HateCount
        FROM   review
        WHERE  ( text LIKE ( '%hate%' )
                  OR text LIKE ( '%hate' )
                  OR text LIKE ( 'hate%' ) )) AS HateCount 
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
SELECT name,
       fans
FROM   user
ORDER  BY fans DESC
LIMIT  10 	

	Copy and Paste the Result Below:

+-----------+------+
| name            | fans |
+-----------+------+
| Amy              |    503 |
| Mimi            |    497 |
| Harald        |    311 |
| Gerald        |    253 |
| Christine |    173 |
| Lisa            |    159 |
| Cat              |    133 |
| William      |    126 |
| Fran            |    124 |
| Lissa          |    120 |
+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

+-----------+-------------+-----------------------+--------------+-----------+
| city            | category        | hours                                  | review_count | rating        |
+-----------+-------------+-----------------------+--------------+-----------+
| Las Vegas | Restaurants | Monday|11:00-0:00          |                    123 | 2-3 stars |
| Las Vegas | Restaurants | Tuesday|11:00-0:00        |                    123 | 2-3 stars |
| Las Vegas | Restaurants | Friday|11:00-0:00          |                    123 | 2-3 stars |
| Las Vegas | Restaurants | Wednesday|11:00-0:00    |                    123 | 2-3 stars |
| Las Vegas | Restaurants | Thursday|11:00-0:00      |                    123 | 2-3 stars |
| Las Vegas | Restaurants | Sunday|11:00-0:00          |                    123 | 2-3 stars |
| Las Vegas | Restaurants | Saturday|11:00-0:00      |                    123 | 2-3 stars |
| Las Vegas | Restaurants | Monday|11:00-20:00        |                    168 | 4-5 stars |
| Las Vegas | Restaurants | Tuesday|11:00-20:00      |                    168 | 4-5 stars |
| Las Vegas | Restaurants | Friday|11:00-20:00        |                    168 | 4-5 stars |
| Las Vegas | Restaurants | Wednesday|11:00-20:00 |                    168 | 4-5 stars |
| Las Vegas | Restaurants | Thursday|11:00-20:00    |                    168 | 4-5 stars |
| Las Vegas | Restaurants | Sunday|8:00-14:00          |                    168 | 4-5 stars |
| Las Vegas | Restaurants | Saturday|11:00-20:00    |                    168 | 4-5 stars |
| Las Vegas | Restaurants | Monday|10:00-23:00        |                    768 | 4-5 stars |
| Las Vegas | Restaurants | Tuesday|10:00-23:00      |                    768 | 4-5 stars |
| Las Vegas | Restaurants | Friday|10:00-23:00        |                    768 | 4-5 stars |
| Las Vegas | Restaurants | Wednesday|10:00-23:00 |                    768 | 4-5 stars |
| Las Vegas | Restaurants | Thursday|10:00-23:00    |                    768 | 4-5 stars |
| Las Vegas | Restaurants | Sunday|10:00-23:00        |                    768 | 4-5 stars |
| Las Vegas | Restaurants | Saturday|10:00-23:00    |                    768 | 4-5 stars |
| Las Vegas | Restaurants | None                                    |                        3 | 4-5 stars |
+-----------+-------------+-----------------------+--------------+-----------+

i. Do the two groups you chose to analyze have a different distribution of hours?

In this scenario I chose Las Vegas’s Restaurants. It is not a significant differences however, it is recognizable
that 2-3 stars restaurants tend to open late and close late compares to 4-5 stars restaurants. 

ii. Do the two groups you chose to analyze have a different number of reviews?
   
4-5 stars restaurants tend to have more reviews than 2-3 star restaurants.      
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

Since we are examining restaurants in same city, It is hard to say there are any significance evidence 
between two groups’ location data. However, based on latitude and longitude data we could assume that 
these restaurants are located among themselves.  

SQL code used for analysis:

SELECT city,
       category,
       hours,
       review_count,
       CASE
         WHEN stars >= 2
              AND stars <= 3 THEN '2-3 stars'
         WHEN stars >= 4
              AND stars <= 5 THEN '4-5 stars'
         ELSE 'others'
       END rating
FROM   (SELECT *
        FROM   business b
               LEFT JOIN category c
                      ON b.id = c.business_id
        WHERE  ( c.category IS NOT NULL
                 AND b.city = 'Las Vegas'
                 AND c.category = 'Restaurants' )) a
       LEFT JOIN hours h
              ON a.id = h.business_id
ORDER  BY rating; 
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.

+--------------------+------------+------------+---------+
| Number_of_business | avg_review | avg_rating | is_open |
+--------------------+------------+------------+---------+
|                              1520 |              23.2 |              3.52 |              0 |
|                              8480 |            31.76 |              3.68 |              1 |
+--------------------+------------+------------+---------+
		
i. Difference 1:
         
Not a big difference but the business that are open tend to have higher average reviews than closed.       

ii. Difference 2:
         
Also, the business that are open tend to have higher average ratings than closed.         
         
SQL code used for analysis:

SELECT Count(DISTINCT( id ))       AS Number_of_business,
       Round(Avg(review_count), 2) AS avg_review,
       Round(Avg(stars), 2)        AS avg_rating,
       is_open
FROM   business
GROUP  BY is_open 
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

In this scenario we will be conduct data analysis on the Yelp dataset understanding relationship between star rating and 
Different states.

         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

To start with in order to understand relationship between star rating in different cities we are going to start with ‘business’ table. 
In addition the categories will be limited since we are only interested in restaurant. First, left join ‘category’ table on primary key
variable ‘id’ and Foreign Key variable ‘business_id’. Next, we will group by state and average the star rating.

From the result table we were able to see Mesa from Arizona has the highest star rate and Charlotte from North Carolina.
                        
                  
iii. Output of your finished dataset:

+-----------------+-------+-------------+-------+
| city                        | state | category        | stars |
+-----------------+-------+-------------+-------+
| Mesa                        | AZ        | Restaurants |      4.5 |
| Charlotte              | NC        | Restaurants |    4.25 |
| Brampton                | ON        | Restaurants |      4.0 |
| Chesterland          | OH        | Restaurants |      4.0 |
| Cleveland              | OH        | Restaurants |      4.0 |
| Cuyahoga Falls    | OH        | Restaurants |      4.0 |
| Madison                  | WI        | Restaurants |      4.0 |
| Medina                    | OH        | Restaurants |      4.0 |
| Middleton              | WI        | Restaurants |      4.0 |
| Oakville                | ON        | Restaurants |      4.0 |
| Scottsdale            | AZ        | Restaurants |      4.0 |
| Tolleson                | AZ        | Restaurants |      4.0 |
| Westlake                | OH        | Restaurants |      4.0 |
| Las Vegas              | NV        | Restaurants | 3.875 |
| Aurora                    | OH        | Restaurants |      3.5 |
| Chandler                | AZ        | Restaurants |      3.5 |
| Edinburgh              | EDH      | Restaurants |      3.5 |
| Fitchburg              | WI        | Restaurants |      3.5 |
| Fountain Hills    | AZ        | Restaurants |      3.5 |
| Inverness              | HLD      | Restaurants |      3.5 |
| Litchfield Park | AZ        | Restaurants |      3.5 |
| Mississauga          | ON        | Restaurants |      3.5 |
| Murrysville          | PA        | Restaurants |      3.5 |
| Paw Creek              | NC        | Restaurants |      3.5 |
| Phoenix                  | AZ        | Restaurants |      3.5 |
+-----------------+-------+-------------+-------+
(Output limit exceeded, 25 of 43 total rows shown)
         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT city,
       state,
       category,
       Avg(stars) stars
FROM   business
       LEFT JOIN category
              ON business.id = category.business_id
WHERE  category = 'Restaurants'
GROUP  BY city
ORDER  BY stars DESC 
